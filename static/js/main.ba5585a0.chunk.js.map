{"version":3,"sources":["globals.ts","services/blockchain.ts","pages/Main/Main.tsx","services/erc725.ts","services/lspFactory.ts","hooks/useWeb3.ts","App.tsx","index.tsx"],"names":["RPC_URL","STEP","getAccountBalance","web3","account","a","parseFloat","utils","eth","getBalance","fromWei","getAccount","myDummyPassword","accounts","wallet","load","length","console","log","create","save","address","myKeyAddress","fetchErc725Data","erc725ContractAddress","schema","name","key","keyType","valueContent","valueType","provider","Web3","providers","HttpProvider","config","ipfsGateway","erc725","ERC725","fetchData","data","deployUp","controllerAddress","deployKey","privateKey","lspFactory","LSPFactory","chainId","LSP3UniversalProfile","deploy","controllingAccounts","lsp3Profile","description","backgroundImage","tags","links","title","url","deployedContracts","LSP3Account","deployUpReactive","callback","deployReactive","subscribe","next","deploymentEvent","toastMessage","type","DeploymentType","TRANSACTION","contractName","functionName","status","DeploymentStatus","COMPLETE","toast","success","info","PROXY","PENDING","receipt","contractAddress","complete","Main","useState","accountAddress","setAccountAddress","isConfettiRunning","setIsConfettiRunning","accountBalance","setAccountBalance","setErc725ContractAddress","isDeployingUp","setIsDeployingUp","erc725Data","setErc725Data","CREATE_ACCOUNT","step","setStep","web3Info","setWeb3Info","useEffect","getWeb3","then","useWeb3","balance","DEPLOY_UP","DONE","FETCH_DATA","run","numberOfPieces","target","rel","href","onClick","FUND_ACCOUNT","error","err","Object","keys","JSON","stringify","App","pauseOnFocusLoss","newestOnTop","autoClose","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba5585a0.chunk.js","sourcesContent":["export const RPC_URL = 'https://rpc.l14.lukso.network';\nexport const CHAIN_ID = 22;\n","import Web3 from 'web3';\n\nexport const getAccountBalance = async (web3: Web3, account) => {\n  return parseFloat(web3.utils.fromWei(await web3.eth.getBalance(account)));\n};\n\nexport const getAccount = async (web3: Web3) => {\n  const myDummyPassword = 'mypassword';\n\n  // Here we try to load an already created key from the localstorage\n  web3.eth.accounts.wallet.load(myDummyPassword);\n\n  // If none exists we create a new key\n  if (!web3.eth.accounts.wallet.length) {\n    console.log('No account detected, generating and saving a new account...');\n    web3.eth.accounts.wallet.create(1);\n    web3.eth.accounts.wallet.save(myDummyPassword);\n\n    // Then we log the address and send test LYX from the L14 faucet here: http://faucet.l14.lukso.network\n    console.log('My new key address ', web3.eth.accounts.wallet[0].address);\n\n    // If we already have a key created we display it, with its current balance\n  } else {\n    const myKeyAddress = web3.eth.accounts.wallet[0].address;\n\n    console.log('Loaded existing key address ', myKeyAddress);\n    console.log(\n      'Balance ',\n      web3.utils.fromWei(await web3.eth.getBalance(myKeyAddress), 'ether'),\n      'LYXt',\n    );\n  }\n\n  return web3.eth.accounts.wallet[0].address;\n};\n","import React, { useEffect, useState } from 'react';\nimport Confetti from 'react-confetti';\nimport { toast } from 'react-toastify';\n\nimport useWeb3 from '../../hooks/useWeb3';\nimport { getAccount, getAccountBalance } from '../../services/blockchain';\nimport { fetchErc725Data } from '../../services/erc725';\nimport { deployUp, deployUpReactive } from '../../services/lspFactory';\n\nenum STEP {\n  CREATE_ACCOUNT,\n  FUND_ACCOUNT,\n  DEPLOY_UP,\n  FETCH_DATA,\n  DONE,\n}\n\nconst Main: React.FC = () => {\n  const [accountAddress, setAccountAddress] = useState('');\n  const [isConfettiRunning, setIsConfettiRunning] = useState(false);\n  const [accountBalance, setAccountBalance] = useState(0);\n  const [erc725ContractAddress, setErc725ContractAddress] = useState('');\n  const [isDeployingUp, setIsDeployingUp] = useState(false);\n  const [erc725Data, setErc725Data] = useState({});\n  const [step, setStep] = useState(STEP.CREATE_ACCOUNT);\n\n  const web3 = useWeb3();\n\n  useEffect(() => {\n    if (!accountAddress || !web3) return;\n\n    getAccountBalance(web3, accountAddress).then((balance) => {\n      setAccountBalance(balance);\n      if (balance > 0) {\n        setStep(STEP.DEPLOY_UP);\n      }\n    });\n  }, [accountAddress, web3]);\n\n  useEffect(() => {\n    if (step === STEP.DONE) {\n      setIsConfettiRunning(true);\n    }\n  }, [step]);\n\n  useEffect(() => {\n    if (!erc725ContractAddress) return;\n    setStep(STEP.FETCH_DATA);\n  }, [erc725ContractAddress]);\n\n  if (!web3) {\n    return <div>'Loading web3'</div>;\n  }\n\n  return (\n    <div>\n      <Confetti run={isConfettiRunning} numberOfPieces={50} />\n      <h1>🆙 Sample React App</h1>\n      <p>\n        This is a sample repo for the{' '}\n        <a\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          href=\"https://docs.lukso.tech/tools/getting-started\"\n        >\n          Getting Started\n        </a>{' '}\n        tutorial.\n        <br />\n        Let's deploy a Universal Profile, configure it and interact with it.\n        <br />\n        It is recommanded to open the developer console to check the logs.\n      </p>\n      <p>\n        <a\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          href=\"https://github.com/Hugoo/up-sample-react-app\"\n        >\n          GitHub\n        </a>\n      </p>\n      <h2>1. {accountAddress && '✅'} 🔑 Create/Get account</h2>\n      {accountAddress ? (\n        <p>\n          Account (EOA) loaded:{' '}\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href={`https://blockscout.com/lukso/l14/address/${accountAddress}`}\n          >\n            {accountAddress}\n          </a>\n        </p>\n      ) : (\n        <p>\n          <button\n            onClick={async () => {\n              const account = await getAccount(web3);\n              setAccountAddress(account);\n              setStep(STEP.FUND_ACCOUNT);\n            }}\n          >\n            Get/create account\n          </button>\n        </p>\n      )}\n      {step >= STEP.FUND_ACCOUNT && (\n        <>\n          <h2>2. {accountBalance > 0 && '✅'} 💰 Fund account</h2>\n          <p>\n            Account balance is: <strong>{accountBalance} LYXt</strong>{' '}\n            <button\n              onClick={async () => {\n                if (!accountAddress) return;\n                const accountBalance = await getAccountBalance(\n                  web3,\n                  accountAddress,\n                );\n                setAccountBalance(accountBalance);\n                if (accountBalance > 0) {\n                  setStep(STEP.DEPLOY_UP);\n                }\n              }}\n            >\n              Refresh balance\n            </button>\n            <br />\n            <a\n              href=\"http://faucet.l14.lukso.network/\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              Use Faucet to fund account\n            </a>\n          </p>\n        </>\n      )}\n      {step >= STEP.DEPLOY_UP && (\n        <>\n          <h2>\n            3. {erc725ContractAddress && '✅'} 🚀 Deploy LSP3 UP Smart contract\n            with lsp-factory.js\n          </h2>\n          <p>\n            With{' '}\n            <a\n              href=\"https://docs.lukso.tech/tools/lsp-factoryjs/getting-started\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              lsp-factory.js\n            </a>\n            , we can simply deploy and configure a Universal Profile smart\n            contract:\n          </p>\n          <button\n            onClick={async () => {\n              setIsDeployingUp(true);\n              setErc725ContractAddress('');\n\n              try {\n                const erc725ContractAddress = await deployUp(\n                  web3,\n                  accountAddress,\n                );\n                setErc725ContractAddress(erc725ContractAddress);\n              } catch (err: any) {\n                console.error(err);\n                toast.error('There was an error, please check console logs.');\n              }\n              setIsDeployingUp(false);\n            }}\n          >\n            Deploy LSP3 UP contract\n          </button>{' '}\n          <button\n            onClick={async () => {\n              setIsDeployingUp(true);\n              setErc725ContractAddress('');\n              try {\n                deployUpReactive(\n                  web3,\n                  accountAddress,\n                  (erc725ContractAddress) => {\n                    setErc725ContractAddress(erc725ContractAddress);\n                  },\n                );\n              } catch (err: any) {\n                console.error(err);\n                toast.error('There was an error, please check console logs.');\n              }\n              setIsDeployingUp(false);\n            }}\n          >\n            Deploy LSP3 UP contract [reactive mode]\n          </button>\n          {isDeployingUp && (\n            <p>\n              🔄 Deploying contracts, it can take up to 2 minutes...\n              <br />\n              💡 You can monitor the contracts deployments/setup on{' '}\n              <a\n                href={`https://blockscout.com/lukso/l14/address/${accountAddress}/transactions`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Blocksout\n              </a>\n              .\n            </p>\n          )}\n          {erc725ContractAddress && (\n            <p>\n              ERC725ContractAddress deployed:{' '}\n              <a\n                href={`https://universalprofile.cloud/${erc725ContractAddress}`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                {erc725ContractAddress}\n              </a>{' '}\n              [\n              <a\n                href={`https://blockscout.com/lukso/l14/address/${erc725ContractAddress}/transactions`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                blockscout\n              </a>\n              ] [\n              <a\n                href={`https://erc725-inspect.lukso.tech/?address=${erc725ContractAddress}`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                inspect\n              </a>\n              ]\n            </p>\n          )}\n        </>\n      )}\n      {step >= STEP.FETCH_DATA && (\n        <>\n          <h2>\n            4. {Object.keys(erc725Data).length > 0 && '✅'} 🔄 Fetch contract\n            data with erc725.js\n          </h2>\n          <p>\n            <a\n              href=\"https://docs.lukso.tech/tools/erc725js/getting-started\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              erc725.js\n            </a>{' '}\n            makes it easy to fetch and decode an ERC725Y smart contract\n            keys/values.\n          </p>\n          <button\n            onClick={async () => {\n              const data = await fetchErc725Data(erc725ContractAddress);\n              setErc725Data(data);\n              if (data !== {}) {\n                setStep(STEP.DONE);\n              }\n            }}\n          >\n            Fetch ERC725 keys/values\n          </button>\n          {Object.keys(erc725Data).length > 0 && (\n            <pre>{JSON.stringify(erc725Data, null, 2)}</pre>\n          )}\n        </>\n      )}\n      {step >= STEP.DONE && <h2>Congratulations 🎉🥳</h2>}\n    </div>\n  );\n};\n\nexport default Main;\n","import { ERC725, ERC725JSONSchema } from '@erc725/erc725.js';\nimport Web3 from 'web3';\nimport { RPC_URL } from '../globals';\n\nexport const fetchErc725Data = async (erc725ContractAddress: string) => {\n  // Part of LSP3-UniversalProfile Schema\n  // https://github.com/lukso-network/LIPs/blob/master/LSPs/LSP-3-UniversalProfile.md\n  const schema: ERC725JSONSchema[] = [\n    {\n      name: 'SupportedStandards:ERC725Account',\n      key: '0xeafec4d89fa9619884b6b89135626455000000000000000000000000afdeb5d6',\n      keyType: 'Mapping',\n      valueContent: '0xafdeb5d6',\n      valueType: 'bytes',\n    },\n    {\n      name: 'LSP3Profile',\n      key: '0x5ef83ad9559033e6e941db7d7c495acdce616347d28e90c7ce47cbfcfcad3bc5',\n      keyType: 'Singleton',\n      valueContent: 'JSONURL',\n      valueType: 'bytes',\n    },\n    {\n      name: 'LSP1UniversalReceiverDelegate',\n      key: '0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47',\n      keyType: 'Singleton',\n      valueContent: 'Address',\n      valueType: 'address',\n    },\n  ];\n\n  const provider = new Web3.providers.HttpProvider(RPC_URL);\n  const config = {\n    ipfsGateway: 'https://ipfs.lukso.network/ipfs/',\n  };\n\n  const erc725 = new ERC725(schema, erc725ContractAddress, provider, config);\n\n  const data = await erc725.fetchData();\n\n  console.log(data);\n\n  return data;\n};\n","import {\n  DeploymentEvent,\n  DeploymentStatus,\n  DeploymentType,\n  LSPFactory,\n} from '@lukso/lsp-factory.js';\nimport Web3 from 'web3';\nimport { toast } from 'react-toastify';\n\nimport { CHAIN_ID, RPC_URL } from '../globals';\n\nexport const deployUp = async (web3: Web3, controllerAddress: string) => {\n  const deployKey = web3.eth.accounts.wallet[0].privateKey; // Private key of the account which will deploy UPs\n  const provider = RPC_URL; // RPC url used to connect to the network\n  const chainId = CHAIN_ID; // Chain Id of the network you want to connect to\n\n  const lspFactory = new LSPFactory(provider, {\n    deployKey,\n    chainId,\n  });\n\n  console.log('🚀 Deploying LSP3UniversalProfile contract...');\n  const deployedContracts = await lspFactory.LSP3UniversalProfile.deploy({\n    controllingAccounts: [controllerAddress], // our key will be controlling our UP in the beginning\n    lsp3Profile: {\n      name: 'My Universal Profile',\n      description: 'My Cool Universal Profile',\n      //   profileImage: [fileBlob], // got some Image uploaded?\n      backgroundImage: [],\n      tags: ['Public Profile'],\n      links: [\n        {\n          title: 'My Website',\n          url: 'http://my-website.com',\n        },\n      ],\n    },\n  });\n\n  console.log(`✅ Deployment and configuration successful`);\n\n  return deployedContracts.LSP3Account.address;\n};\n\nexport const deployUpReactive = async (\n  web3: Web3,\n  controllerAddress: string,\n  callback: (erc725ContractAddress: string) => void,\n) => {\n  const deployKey = web3.eth.accounts.wallet[0].privateKey;\n  const provider = RPC_URL;\n  const chainId = CHAIN_ID;\n\n  const lspFactory = new LSPFactory(provider, {\n    deployKey,\n    chainId,\n  });\n\n  console.log('🚀 [reactive] Deploying LSP3UniversalProfile contract...');\n\n  let erc725ContractAddress: string;\n  lspFactory.LSP3UniversalProfile.deployReactive({\n    controllingAccounts: [controllerAddress],\n    lsp3Profile: {\n      name: 'My Universal Profile',\n      description: 'My Cool Universal Profile',\n      backgroundImage: [],\n      tags: ['Public Profile'],\n      links: [\n        {\n          title: 'My Website',\n          url: 'http://my-website.com',\n        },\n      ],\n    },\n  }).subscribe({\n    next: (deploymentEvent: DeploymentEvent) => {\n      console.log(deploymentEvent);\n\n      let toastMessage = '';\n\n      if (deploymentEvent.type === DeploymentType.TRANSACTION) {\n        toastMessage = `${deploymentEvent.contractName}: ${deploymentEvent.functionName} ${deploymentEvent.status}`;\n      } else {\n        toastMessage = `${deploymentEvent.contractName}: ${deploymentEvent.status}`;\n      }\n\n      switch (deploymentEvent.status) {\n        case DeploymentStatus.COMPLETE: {\n          toast.success(toastMessage);\n          break;\n        }\n        default: {\n          toast.info(toastMessage);\n          break;\n        }\n      }\n\n      if (\n        deploymentEvent.type === DeploymentType.PROXY &&\n        deploymentEvent.status === DeploymentStatus.PENDING &&\n        deploymentEvent.contractName === 'LSP3Account' &&\n        deploymentEvent.receipt\n      ) {\n        erc725ContractAddress = deploymentEvent.receipt.contractAddress;\n      }\n    },\n    complete: () => {\n      toast.success('Deployment successful');\n      callback(erc725ContractAddress);\n    },\n  });\n};\n","/**\n * @author Hugo Masclet <git@hugom.xyz>\n */\nimport { useState, useEffect } from 'react';\nimport Web3 from 'web3';\n\nimport { RPC_URL } from '../globals';\n\nexport default function useWeb3() {\n  const [web3Info, setWeb3Info] = useState<Web3>();\n\n  useEffect(() => {\n    const getWeb3 = async () => {\n      const web3 = new Web3(RPC_URL);\n      return web3;\n    };\n\n    getWeb3().then((web3) => {\n      setWeb3Info(web3);\n      if (process.env.NODE_ENV === 'development') {\n        // @ts-ignore\n        window.web3 = web3;\n      }\n    });\n  }, []);\n\n  return web3Info;\n}\n","import React from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport Main from './pages/Main';\n\n// import your favorite web3 convenience library here\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Main />\n      <ToastContainer pauseOnFocusLoss newestOnTop autoClose={10000} />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}