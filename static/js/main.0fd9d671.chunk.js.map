{"version":3,"sources":["globals.ts","services/web3.ts","pages/Main/Main.tsx","services/erc725.ts","services/lspFactory.ts","services/blockchain.ts","hooks/useWeb3.ts","constants.ts","contracts/abi.ts","pages/Main/Transactions.tsx","App.tsx","index.tsx"],"names":["RPC_URL","STEP","getAccountBalance","web3","account","a","parseFloat","utils","eth","getBalance","fromWei","getAccount","myDummyPassword","accounts","wallet","load","length","console","log","create","save","address","privateKey","myKeyAddress","fetchErc725Data","erc725ContractAddress","schema","name","key","keyType","valueContent","valueType","provider","Web3","providers","HttpProvider","config","ipfsGateway","erc725","ERC725","fetchData","data","deployUp","controllerAddress","deployKey","lspFactory","LSPFactory","chainId","LSP3UniversalProfile","deploy","controllingAccounts","lsp3Profile","description","backgroundImage","tags","links","title","url","deployedContracts","ERC725Account","deployUpReactive","callback","deployReactive","subscribe","next","deploymentEvent","toastMessage","type","DeploymentType","TRANSACTION","contractName","functionName","status","DeploymentStatus","COMPLETE","toast","success","info","PROXY","PENDING","receipt","contractAddress","complete","executeTransaction","erc725Address","myUP","Contract","UniversalProfile","abi","methods","owner","call","keyManagerAddress","myKeyManager","KeyManager","setData","encodeABI","execute","send","from","gas","gasPrice","toWei","Main","useState","accountAddress","setAccountAddress","isConfettiRunning","setIsConfettiRunning","accountBalance","setAccountBalance","setErc725ContractAddress","isDeployingUp","setIsDeployingUp","erc725Data","setErc725Data","CREATE_ACCOUNT","step","setStep","web3Info","setWeb3Info","useEffect","getWeb3","then","useWeb3","balance","DEPLOY_UP","DONE","FETCH_DATA","run","numberOfPieces","target","rel","href","to","onClick","FUND_ACCOUNT","error","err","Object","keys","INTERACT_WITH_CONTRACT","JSON","stringify","web3Constants","defaultFunctions","inputs","internalType","outputs","stateMutability","Transaction","setWeb3","setAccount","payload","setPayload","providerOptions","walletconnect","display","package","WalletConnectProvider","options","rpc","network","web3Modal","Web3Modal","cacheProvider","connectWallet","connect","window","ethereum","request","method","params","chainName","nativeCurrency","symbol","decimals","rpcUrls","blockExplorerUrls","getAccounts","on","sendLyx","alert","weiValue","sendTransaction","value","once","erc725yContract","setDataPermissions","undefined","clearCachedProvider","App","basename","path","element","pauseOnFocusLoss","newestOnTop","autoClose","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+VAAaA,EAAU,gCCEhB,ICSFC,EDTQC,EAAiB,uCAAG,WAAOC,EAAYC,GAAnB,SAAAC,EAAA,kEACxBC,WADwB,KACbH,EAAKI,MADQ,SACYJ,EAAKK,IAAIC,WAAWL,GADhC,oCACFM,QADE,6FAAH,wDAIjBC,EAAU,uCAAG,WAAOR,GAAP,iBAAAE,EAAA,yDAClBO,EAAkB,aAGxBT,EAAKK,IAAIK,SAASC,OAAOC,KAAKH,GAGzBT,EAAKK,IAAIK,SAASC,OAAOE,OAPN,iBAQtBC,QAAQC,IAAI,+DACZf,EAAKK,IAAIK,SAASC,OAAOK,OAAO,GAChChB,EAAKK,IAAIK,SAASC,OAAOM,KAAKR,GAG9BK,QAAQC,IAAI,sBAAuBf,EAAKK,IAAIK,SAASC,OAAO,GAAGO,SAC/DJ,QAAQC,IAAI,eAAgBf,EAAKK,IAAIK,SAASC,OAAO,GAAGQ,YAdlC,+BAkBhBC,EAAepB,EAAKK,IAAIK,SAASC,OAAO,GAAGO,QAEjDJ,QAAQC,IAAI,+BAAgCK,GAC5CN,QAAQC,IAAI,eAAgBf,EAAKK,IAAIK,SAASC,OAAO,GAAGQ,YArBlC,KAsBtBL,QAtBsB,KAwBpBd,EAAKI,MAxBe,UAwBKJ,EAAKK,IAAIC,WAAWc,GAxBzB,8BAwBTb,QAxBS,eAwBwC,SAxBxC,KAsBdQ,IAtBc,UAuBpB,WAvBoB,KAyBpB,QAzBoB,iCA6BjBf,EAAKK,IAAIK,SAASC,OAAO,GAAGO,SA7BX,4CAAH,sD,SEFVG,EAAe,uCAAG,WAAOC,GAAP,uBAAApB,EAAA,6DAGvBqB,EAA6B,CACjC,CACEC,KAAM,0CACNC,IAAK,qEACLC,QAAS,UACTC,aAAc,aACdC,UAAW,SAEb,CACEJ,KAAM,cACNC,IAAK,qEACLC,QAAS,YACTC,aAAc,UACdC,UAAW,SAEb,CACEJ,KAAM,gCACNC,IAAK,qEACLC,QAAS,YACTC,aAAc,UACdC,UAAW,YAITC,EAAW,IAAIC,IAAKC,UAAUC,aAAanC,GAC3CoC,EAAS,CACbC,YAAa,oCAGTC,EAAS,IAAIC,IAAOb,EAAQD,EAAuBO,EAAUI,GAhCtC,SAkCVE,EAAOE,YAlCG,cAkCvBC,EAlCuB,OAoC7BxB,QAAQC,IAAIuB,GApCiB,kBAsCtBA,GAtCsB,2CAAH,sD,SCOfC,EAAQ,uCAAG,WAAOvC,EAAYwC,GAAnB,qBAAAtC,EAAA,6DAChBuC,EAAYzC,EAAKK,IAAIK,SAASC,OAAO,GAAGQ,WAC7BtB,EJZK,GIehB6C,EAAa,IAAIC,IAHN9C,gCAG2B,CAC1C4C,YACAG,QJjBoB,KIoBtB9B,QAAQC,IAAI,2DAVU,SAWU2B,EAAWG,qBAAqBC,OAAO,CACrEC,oBAAqB,CAACP,GACtBQ,YAAa,CACXxB,KAAM,uBACNyB,YAAa,4BAEbC,gBAAiB,GACjBC,KAAM,CAAC,kBACPC,MAAO,CACL,CACEC,MAAO,aACPC,IAAK,6BAtBS,cAWhBC,EAXgB,OA4BtBzC,QAAQC,IAAR,kDACAD,QAAQC,IAAI,aAAcwC,GA7BJ,4BA+BfA,EAAkBC,qBA/BH,aA+Bf,EAAiCtC,SA/BlB,4CAAH,wDAkCRuC,EAAgB,uCAAG,WAC9BzD,EACAwC,EACAkB,GAH8B,mBAAAxD,EAAA,sDAKxBuC,EAAYzC,EAAKK,IAAIK,SAASC,OAAO,GAAGQ,WAC7BtB,EJlDK,GIqDhB6C,EAAa,IAAIC,IAHN9C,gCAG2B,CAC1C4C,YACAG,QJvDoB,KI0DtB9B,QAAQC,IAAI,sEAGZ2B,EAAWG,qBAAqBc,eAAe,CAC7CZ,oBAAqB,CAACP,GACtBQ,YAAa,CACXxB,KAAM,uBACNyB,YAAa,4BACbC,gBAAiB,GACjBC,KAAM,CAAC,kBACPC,MAAO,CACL,CACEC,MAAO,aACPC,IAAK,6BAIVM,UAAU,CACXC,KAAM,SAACC,GACLhD,QAAQC,IAAI+C,GAEZ,IAAIC,EAAe,GAQnB,GALEA,EADED,EAAgBE,OAASC,IAAeC,YAC9B,UAAMJ,EAAgBK,aAAtB,aAAuCL,EAAgBM,aAAvD,YAAuEN,EAAgBO,QAEvF,UAAMP,EAAgBK,aAAtB,aAAuCL,EAAgBO,QAG7DP,EAAgBO,SACjBC,IAAiBC,SACpBC,IAAMC,QAAQV,QAIdS,IAAME,KAAKX,GAMbD,EAAgBE,OAASC,IAAeU,OACxCb,EAAgBO,SAAWC,IAAiBM,SACX,kBAAjCd,EAAgBK,cAChBL,EAAgBe,UAEhBvD,EAAwBwC,EAAgBe,QAAQC,kBAGpDC,SAAU,WACRP,IAAMC,QAAQ,yBACdf,EAASpC,MAjEiB,2CAAH,0D,kBCxChB0D,EAAkB,uCAAG,WAAOhF,EAAYiF,GAAnB,qBAAA/E,EAAA,6DAC1BgF,EAAO,IAAIlF,EAAKK,IAAI8E,SACxBC,EAAiBC,IACjBJ,GAH8B,SAMAC,EAAKI,QAAQC,QAAQC,OANrB,cAM1BC,EAN0B,OAQhC3E,QAAQC,IAAI,oCAAqC0E,GAG3CC,EAAe,IAAI1F,EAAKK,IAAI8E,SAChCQ,EAAWN,IACXI,GAGIJ,EAAMH,EAAKI,QACdM,QACC,CAAC,sEACD,CACE,yLAGHC,YAvB6B,SA0B1BH,EAAaJ,QAAQQ,QAAQT,GAAKU,KAAK,CAC3CC,KAAMhG,EAAKK,IAAIK,SAASC,OAAO,GAAGO,QAClC+E,IAAK,IACLC,SAAUlG,EAAKI,MAAM+F,MAAM,KAAM,UA7BH,2CAAH,wD,kBHM1BrG,O,mCAAAA,I,+BAAAA,I,yBAAAA,I,2BAAAA,I,mDAAAA,I,gBAAAA,M,KASL,IA0SesG,EA1SQ,WACrB,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAkDF,oBAAS,GAA3D,mBAAOG,EAAP,KAA0BC,EAA1B,KACA,EAA4CJ,mBAAS,GAArD,mBAAOK,EAAP,KAAuBC,EAAvB,KACA,EAA0DN,mBAAS,IAAnE,mBAAO/E,EAAP,KAA8BsF,EAA9B,KACA,EAA0CP,oBAAS,GAAnD,mBAAOQ,EAAP,KAAsBC,EAAtB,KACA,EAAoCT,mBAAS,IAA7C,mBAAOU,EAAP,KAAmBC,EAAnB,KACA,EAAwBX,mBAASvG,EAAKmH,gBAAtC,mBAAOC,EAAP,KAAaC,EAAb,KAEMnH,EIrBO,WACb,MAAgCqG,qBAAhC,mBAAOe,EAAP,KAAiBC,EAAjB,KAiBA,OAfAC,qBAAU,WACR,IAAMC,EAAO,uCAAG,4BAAArH,EAAA,6DACRF,EAAO,IAAI8B,IAAKjC,GADR,kBAEPG,GAFO,2CAAH,qDAKbuH,IAAUC,MAAK,SAACxH,GACdqH,EAAYrH,QAMb,IAEIoH,EJGMK,GAwBb,OAtBAH,qBAAU,WACHhB,GAAmBtG,GAExBD,EAAkBC,EAAMsG,GAAgBkB,MAAK,SAACE,GAC5Cf,EAAkBe,GACdA,EAAU,GACZP,EAAQrH,EAAK6H,gBAGhB,CAACrB,EAAgBtG,IAEpBsH,qBAAU,WACJJ,IAASpH,EAAK8H,MAChBnB,GAAqB,KAEtB,CAACS,IAEJI,qBAAU,WACHhG,GACL6F,EAAQrH,EAAK+H,cACZ,CAACvG,IAECtB,EAKH,gCACE,cAAC,IAAD,CAAU8H,IAAKtB,EAAmBuB,eAAgB,KAClD,+DACA,8DACgC,IAC9B,mBACEC,OAAO,SACPC,IAAI,aACJC,KAAK,gDAHP,6BAMK,IARP,YAUE,uBAVF,uEAYE,uBAZF,wEAeA,8BACE,mBACEF,OAAO,SACPC,IAAI,aACJC,KAAK,+CAHP,oBAMK,IAPP,KAQI,cAAC,IAAD,CAAMC,GAAG,MAAT,6BAEJ,qCAAQ7B,GAAkB,SAA1B,sCACCA,EACC,sDACwB,IACtB,mBACE0B,OAAO,SACPC,IAAI,aACJC,KAAI,mDAA8C5B,GAHpD,SAKGA,OAIL,4BACE,wBACE8B,QAAO,sBAAE,4BAAAlI,EAAA,sEACeM,EAAWR,GAD1B,OACDC,EADC,OAEPsG,EAAkBtG,GAClBkH,EAAQrH,EAAKuI,cAHN,2CADX,kCAWHnB,GAAQpH,EAAKuI,cACZ,qCACE,qCAAQ3B,EAAiB,GAAK,SAA9B,gCACA,qDACsB,mCAASA,EAAT,WAAuC,IAC3D,wBACE0B,QAAO,sBAAE,4BAAAlI,EAAA,yDACFoG,EADE,iEAEsBvG,EAC3BC,EACAsG,GAJK,OAEDI,EAFC,OAMPC,EAAkBD,GACdA,EAAiB,GACnBS,EAAQrH,EAAK6H,WARR,2CADX,6BAeA,uBACA,mBACEO,KAAK,mCACLF,OAAO,SACPC,IAAI,aAHN,8CAULf,GAAQpH,EAAK6H,WACZ,qCACE,qCACMrG,GAAyB,SAD/B,qEAIA,qCACO,IACL,mBACE4G,KAAK,8DACLF,OAAO,SACPC,IAAI,aAHN,4BAFF,8EAYA,wBACEG,QAAO,sBAAE,4BAAAlI,EAAA,6DACP4G,GAAiB,GACjBF,EAAyB,IAFlB,kBAK+BrE,EAClCvC,EACAsG,GAPG,QAKChF,EALD,SAUHsF,EAAyBtF,GAVtB,gDAaLR,QAAQwH,MAAR,MACA9D,IAAM8D,MAAM,kDAdP,QAgBPxB,GAAiB,GAhBV,yDADX,qCAqBU,IACV,wBACEsB,QAAO,sBAAE,sBAAAlI,EAAA,sDACP4G,GAAiB,GACjBF,EAAyB,IACzB,IACEnD,EACEzD,EACAsG,GACA,SAAChF,GACCsF,EAAyBtF,GACzBwF,GAAiB,MAGrB,MAAOyB,GACPzH,QAAQwH,MAAMC,GACd/D,IAAM8D,MAAM,kDACZxB,GAAiB,GAfZ,2CADX,qDAsBCD,GACC,iGAEE,uBAFF,kEAGwD,IACtD,mBACEqB,KAAI,mDAA8C5B,EAA9C,iBACJ0B,OAAO,SACPC,IAAI,aAHN,uBAJF,OAcD3G,GACC,gEACkC,IAChC,mBACE4G,KAAI,yCAAoC5G,GACxC0G,OAAO,SACPC,IAAI,aAHN,SAKG3G,IACE,IARP,IAUE,mBACE4G,KAAI,mDAA8C5G,EAA9C,iBACJ0G,OAAO,SACPC,IAAI,aAHN,wBAVF,MAkBE,mBACEC,KAAI,qDAAgD5G,GACpD0G,OAAO,SACPC,IAAI,aAHN,qBAlBF,UA8BLf,GAAQpH,EAAK+H,YACZ,qCACE,qCACMW,OAAOC,KAAK1B,GAAYlG,OAAS,GAAK,SAD5C,sDAIA,8BACE,mBACEqH,KAAK,yDACLF,OAAO,SACPC,IAAI,aAHN,uBAMK,IAPP,8EAWA,wBACEG,QAAO,sBAAE,4BAAAlI,EAAA,sEACYmB,EAAgBC,GAD5B,OACDgB,EADC,OAEP0E,EAAc1E,GACVA,IAAS,IAAM4E,IAASpH,EAAK8H,MAC/BT,EAAQrH,EAAK4I,wBAJR,2CADX,sCAWCF,OAAOC,KAAK1B,GAAYlG,OAAS,GAChC,8BAAM8H,KAAKC,UAAU7B,EAAY,KAAM,QAI5CG,GAAQpH,EAAK4I,wBACZ,qCACE,qCAAQxB,IAASpH,EAAK8H,MAAQ,SAA9B,0CACA,8BACE,mBACEM,KAAK,wEACLF,OAAO,SACPC,IAAI,aAHN,8CAMK,IAPP,mDAUA,wBACEG,QAAO,sBAAE,sBAAAlI,EAAA,sEACD8E,EAAmBhF,EAAMsB,GADxB,OAGP6F,EAAQrH,EAAK8H,MAHN,2CADX,mCASCV,IAASpH,EAAK8H,MACb,iJAOLV,GAAQpH,EAAK8H,MAAQ,6EAnQjB,kD,2BKtDEiB,EACD,cCDCC,EAAwB,CACnClD,QAAS,CACPmD,OAAQ,CACN,CACEC,aAAc,YACdxH,KAAM,QACNwC,KAAM,aAER,CACEgF,aAAc,UACdxH,KAAM,UACNwC,KAAM,YAGVxC,KAAM,UACNyH,QAAS,GACTC,gBAAiB,aACjBlF,KAAM,aCqJKmF,EA/Je,WAC5B,MAAwB9C,qBAAxB,mBAAOrG,EAAP,KAAaoJ,EAAb,KACA,EAA8B/C,qBAA9B,mBAAOpG,EAAP,KAAgBoJ,EAAhB,KACA,EAA8BhD,qBAA9B,mBAAOiD,EAAP,KAAgBC,EAAhB,KAIMC,EAAkB,CACtBC,cAAe,CACbC,QAAS,CACPlI,KAAM,UAERmI,QAASC,IACTC,QAAS,CACPC,IAAK,CACH,GAAI,qCAENC,QAAS,UACTnH,QAAS,MAKToH,EAAY,IAAIC,IAAU,CAC9BF,QAAS,UACTG,eAAe,EACfV,oBAGIW,EAAa,uCAAG,gCAAAjK,EAAA,sEACG8J,EAAUI,UADb,cACdvI,EADc,OAGd7B,EAAO,IAAI8B,IAAKD,GACtBwI,OAAOrK,KAAO6B,EAEdf,QAAQC,IAAI,WAAYc,GAExBuH,EAAQpJ,GARY,mBAYZqK,OAAOC,SAASC,QAAQ,CAC5BC,OAAQ,0BACRC,OAAQ,CACN,CACE7H,QAAS,OACT8H,UAAW,YACXC,eAAgB,CACdnJ,KAAM,QACNoJ,OAAQ,MACRC,SAAU,IAEZC,QAAS,CAAC,iCACVC,kBAAmB,CAAC,wCAxBR,0DA6BlBjK,QAAQwH,MAAM,wCA7BI,yBAmCGtI,EAAKK,IAAI2K,cAnCZ,QAmCdtK,EAnCc,OAoCpB2I,EAAW3I,EAAS,IAEpBmB,EAASoJ,GAAG,WAAW,SAACvG,GACtB5D,QAAQC,IAAI2D,MAGd7C,EAASoJ,GAAG,mBAAmB,SAACvK,GAC9BI,QAAQC,IAAIL,GACZ2I,EAAW3I,EAAS,OAItBmB,EAASoJ,GAAG,gBAAgB,SAACrI,GAC3B9B,QAAQC,IAAI6B,MAjDM,0DAAH,qDA2DbsI,EAAO,uCAAG,4BAAAhL,EAAA,yDACTF,EADS,uBAEZmL,MAAM,iBAFM,iCAMRC,EAAWpL,EAAKI,MAAM+F,MAzFZ,MAyF6B,SAN/B,SAODnG,EAAKK,IACfgL,gBAAgB,CACfrF,KAAM/F,EACNkI,GAAI,6CACJmD,MAAOF,EACPlF,SAAU2C,IAGX0C,KAAK,WAAW,SAACjC,GAChBxI,QAAQC,IAAIuI,GACZC,EAAWZ,KAAKC,UAAUU,EAAS,KAAM,OAjB/B,mFAAH,qDAqBP1D,EAAO,uCAAG,4BAAA1F,EAAA,yDACTF,EADS,uBAEZmL,MAAM,iBAFM,iCAMVK,EAAkB,IAAIxL,EAAKK,IAAI8E,SACjC,CAAC2D,EAAiBlD,SAClB,8CARY,kBAWP4F,EAAgBlG,QACpBM,QACC,CAAC,sEACD,CACE,yLAGHG,KAAK,CACJC,KAAM/F,IAEPsL,KAAK,WAAW,SAACjC,GAChBxI,QAAQC,IAAI4H,KAAKC,UAAUU,EAAS,KAAM,IAC1CC,EAAWZ,KAAKC,UAAUU,EAAS,KAAM,QAvB/B,2CAAH,qDA2BPmC,EAAkB,uCAAG,sBAAAvL,EAAA,0FAAH,qDAIxB,OACE,gCACE,6EACA,+CACA,8BACE,wBAAQkI,QAASnI,EA/DE,WACvBoJ,OAAWqC,GACXnC,EAAW,IACXS,EAAU2B,uBA4DwCxB,EAA9C,SACGlK,EAAO,qBAAiBA,GAAY,YAC7B,IAHZ,iFAOA,yBAAQmI,QAAS8C,EAAjB,kBAlJc,MAkJd,UAAwD,IACxD,wBAAQ9C,QAASxC,EAAjB,sBAA4C,IAC5C,wBAAQwC,QAASqD,EAAjB,oCACA,8BAAMnC,QCpIGsC,EAnBO,WACpB,OACE,cAAC,IAAD,CAAeC,SAAS,sBAAxB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,MAAMC,QAAS,cAAC,EAAD,MAC3B,cAAC,IAAD,CACED,KAAK,IACLC,QACE,qCACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAgBC,kBAAgB,EAACC,aAAW,EAACC,UAAW,iBCftEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.0fd9d671.chunk.js","sourcesContent":["export const RPC_URL = 'https://rpc.l14.lukso.network';\nexport const CHAIN_ID = 22;\n","import Web3 from 'web3';\n\nexport const getAccountBalance = async (web3: Web3, account) => {\n  return parseFloat(web3.utils.fromWei(await web3.eth.getBalance(account)));\n};\n\nexport const getAccount = async (web3: Web3) => {\n  const myDummyPassword = 'mypassword';\n\n  // Here we try to load an already created key from the localstorage\n  web3.eth.accounts.wallet.load(myDummyPassword);\n\n  // If none exists we create a new key\n  if (!web3.eth.accounts.wallet.length) {\n    console.log('No account detected, generating and saving a new account...');\n    web3.eth.accounts.wallet.create(1);\n    web3.eth.accounts.wallet.save(myDummyPassword);\n\n    // Then we log the address and send test LYX from the L14 faucet here: http://faucet.l14.lukso.network\n    console.log('My new key address:', web3.eth.accounts.wallet[0].address);\n    console.log('Private key:', web3.eth.accounts.wallet[0].privateKey);\n\n    // If we already have a key created we display it, with its current balance\n  } else {\n    const myKeyAddress = web3.eth.accounts.wallet[0].address;\n\n    console.log('Loaded existing key address ', myKeyAddress);\n    console.log('Private key:', web3.eth.accounts.wallet[0].privateKey);\n    console.log(\n      'Balance ',\n      web3.utils.fromWei(await web3.eth.getBalance(myKeyAddress), 'ether'),\n      'LYXt',\n    );\n  }\n\n  return web3.eth.accounts.wallet[0].address;\n};\n","import React, { useEffect, useState } from 'react';\nimport Confetti from 'react-confetti';\nimport { toast } from 'react-toastify';\n\nimport useWeb3 from '../../hooks/useWeb3';\nimport { getAccount, getAccountBalance } from '../../services/web3';\nimport { fetchErc725Data } from '../../services/erc725';\nimport { deployUp, deployUpReactive } from '../../services/lspFactory';\nimport { executeTransaction } from '../../services/blockchain';\nimport { Link } from 'react-router-dom';\n\nenum STEP {\n  CREATE_ACCOUNT,\n  FUND_ACCOUNT,\n  DEPLOY_UP,\n  FETCH_DATA,\n  INTERACT_WITH_CONTRACT,\n  DONE,\n}\n\nconst Main: React.FC = () => {\n  const [accountAddress, setAccountAddress] = useState('');\n  const [isConfettiRunning, setIsConfettiRunning] = useState(false);\n  const [accountBalance, setAccountBalance] = useState(0);\n  const [erc725ContractAddress, setErc725ContractAddress] = useState('');\n  const [isDeployingUp, setIsDeployingUp] = useState(false);\n  const [erc725Data, setErc725Data] = useState({});\n  const [step, setStep] = useState(STEP.CREATE_ACCOUNT);\n\n  const web3 = useWeb3();\n\n  useEffect(() => {\n    if (!accountAddress || !web3) return;\n\n    getAccountBalance(web3, accountAddress).then((balance) => {\n      setAccountBalance(balance);\n      if (balance > 0) {\n        setStep(STEP.DEPLOY_UP);\n      }\n    });\n  }, [accountAddress, web3]);\n\n  useEffect(() => {\n    if (step === STEP.DONE) {\n      setIsConfettiRunning(true);\n    }\n  }, [step]);\n\n  useEffect(() => {\n    if (!erc725ContractAddress) return;\n    setStep(STEP.FETCH_DATA);\n  }, [erc725ContractAddress]);\n\n  if (!web3) {\n    return <div>'Loading web3'</div>;\n  }\n\n  return (\n    <div>\n      <Confetti run={isConfettiRunning} numberOfPieces={50} />\n      <h1>🆙 Sample React App</h1>\n      <p>\n        This is a sample repo for the{' '}\n        <a\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          href=\"https://docs.lukso.tech/tools/getting-started\"\n        >\n          Getting Started\n        </a>{' '}\n        tutorial.\n        <br />\n        Let's deploy a Universal Profile, configure it and interact with it.\n        <br />\n        It is recommanded to open the developer console to check the logs.\n      </p>\n      <p>\n        <a\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          href=\"https://github.com/Hugoo/up-sample-react-app\"\n        >\n          GitHub\n        </a>{' '}\n        - <Link to=\"/tx\">Transactions</Link>\n      </p>\n      <h2>1. {accountAddress && '✅'} 🔑 Create/Get account</h2>\n      {accountAddress ? (\n        <p>\n          Account (EOA) loaded:{' '}\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href={`https://blockscout.com/lukso/l14/address/${accountAddress}`}\n          >\n            {accountAddress}\n          </a>\n        </p>\n      ) : (\n        <p>\n          <button\n            onClick={async () => {\n              const account = await getAccount(web3);\n              setAccountAddress(account);\n              setStep(STEP.FUND_ACCOUNT);\n            }}\n          >\n            Get/create account\n          </button>\n        </p>\n      )}\n      {step >= STEP.FUND_ACCOUNT && (\n        <>\n          <h2>2. {accountBalance > 0 && '✅'} 💰 Fund account</h2>\n          <p>\n            Account balance is: <strong>{accountBalance} LYXt</strong>{' '}\n            <button\n              onClick={async () => {\n                if (!accountAddress) return;\n                const accountBalance = await getAccountBalance(\n                  web3,\n                  accountAddress,\n                );\n                setAccountBalance(accountBalance);\n                if (accountBalance > 0) {\n                  setStep(STEP.DEPLOY_UP);\n                }\n              }}\n            >\n              Refresh balance\n            </button>\n            <br />\n            <a\n              href=\"http://faucet.l14.lukso.network/\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              Use Faucet to fund account\n            </a>\n          </p>\n        </>\n      )}\n      {step >= STEP.DEPLOY_UP && (\n        <>\n          <h2>\n            3. {erc725ContractAddress && '✅'} 🚀 Deploy LSP3 UP Smart contract\n            with lsp-factory.js\n          </h2>\n          <p>\n            With{' '}\n            <a\n              href=\"https://docs.lukso.tech/tools/lsp-factoryjs/getting-started\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              lsp-factory.js\n            </a>\n            , we can simply deploy and configure a Universal Profile smart\n            contract:\n          </p>\n          <button\n            onClick={async () => {\n              setIsDeployingUp(true);\n              setErc725ContractAddress('');\n\n              try {\n                const erc725ContractAddress = await deployUp(\n                  web3,\n                  accountAddress,\n                );\n                if (erc725ContractAddress) {\n                  setErc725ContractAddress(erc725ContractAddress);\n                }\n              } catch (err: any) {\n                console.error(err);\n                toast.error('There was an error, please check console logs.');\n              }\n              setIsDeployingUp(false);\n            }}\n          >\n            Deploy LSP3 UP contract\n          </button>{' '}\n          <button\n            onClick={async () => {\n              setIsDeployingUp(true);\n              setErc725ContractAddress('');\n              try {\n                deployUpReactive(\n                  web3,\n                  accountAddress,\n                  (erc725ContractAddress) => {\n                    setErc725ContractAddress(erc725ContractAddress);\n                    setIsDeployingUp(false);\n                  },\n                );\n              } catch (err: any) {\n                console.error(err);\n                toast.error('There was an error, please check console logs.');\n                setIsDeployingUp(false);\n              }\n            }}\n          >\n            Deploy LSP3 UP contract [reactive mode]\n          </button>\n          {isDeployingUp && (\n            <p>\n              🔄 Deploying contracts, it can take up to 2 minutes...\n              <br />\n              💡 You can monitor the contracts deployments/setup on{' '}\n              <a\n                href={`https://blockscout.com/lukso/l14/address/${accountAddress}/transactions`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Blocksout\n              </a>\n              .\n            </p>\n          )}\n          {erc725ContractAddress && (\n            <p>\n              ERC725ContractAddress deployed:{' '}\n              <a\n                href={`https://universalprofile.cloud/${erc725ContractAddress}`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                {erc725ContractAddress}\n              </a>{' '}\n              [\n              <a\n                href={`https://blockscout.com/lukso/l14/address/${erc725ContractAddress}/transactions`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                blockscout\n              </a>\n              ] [\n              <a\n                href={`https://erc725-inspect.lukso.tech/?address=${erc725ContractAddress}`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                inspect\n              </a>\n              ]\n            </p>\n          )}\n        </>\n      )}\n      {step >= STEP.FETCH_DATA && (\n        <>\n          <h2>\n            4. {Object.keys(erc725Data).length > 0 && '✅'} 🔄 Fetch contract\n            data with erc725.js\n          </h2>\n          <p>\n            <a\n              href=\"https://docs.lukso.tech/tools/erc725js/getting-started\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              erc725.js\n            </a>{' '}\n            makes it easy to fetch and decode an ERC725Y smart contract\n            keys/values.\n          </p>\n          <button\n            onClick={async () => {\n              const data = await fetchErc725Data(erc725ContractAddress);\n              setErc725Data(data);\n              if (data !== {} && step !== STEP.DONE) {\n                setStep(STEP.INTERACT_WITH_CONTRACT);\n              }\n            }}\n          >\n            Fetch ERC725 keys/values\n          </button>\n          {Object.keys(erc725Data).length > 0 && (\n            <pre>{JSON.stringify(erc725Data, null, 2)}</pre>\n          )}\n        </>\n      )}\n      {step >= STEP.INTERACT_WITH_CONTRACT && (\n        <>\n          <h2>5. {step === STEP.DONE && '✅'} 🧙 Interact with contract</h2>\n          <p>\n            <a\n              href=\"https://www.npmjs.com/package/@lukso/universalprofile-smart-contracts\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              universalprofile-smart-contracts\n            </a>{' '}\n            lets you use the LUKSO's smart contract ABIs.\n          </p>\n          <button\n            onClick={async () => {\n              await executeTransaction(web3, erc725ContractAddress);\n\n              setStep(STEP.DONE);\n            }}\n          >\n            Execute a transaction\n          </button>\n          {step === STEP.DONE && (\n            <p>\n              The contract data have been updated, you can refresh the data\n              again at the previous step to see updated data.\n            </p>\n          )}\n        </>\n      )}\n      {step >= STEP.DONE && <h2>Congratulations 🎉🥳</h2>}\n    </div>\n  );\n};\n\nexport default Main;\n","import { ERC725, ERC725JSONSchema } from '@erc725/erc725.js';\nimport Web3 from 'web3';\nimport { RPC_URL } from '../globals';\n\nexport const fetchErc725Data = async (erc725ContractAddress: string) => {\n  // Part of LSP3-UniversalProfile Schema\n  // https://github.com/lukso-network/LIPs/blob/master/LSPs/LSP-3-UniversalProfile.md\n  const schema: ERC725JSONSchema[] = [\n    {\n      name: 'SupportedStandards:LSP3UniversalProfile',\n      key: '0xeafec4d89fa9619884b6b89135626455000000000000000000000000abe425d6',\n      keyType: 'Mapping',\n      valueContent: '0xabe425d6',\n      valueType: 'bytes',\n    },\n    {\n      name: 'LSP3Profile',\n      key: '0x5ef83ad9559033e6e941db7d7c495acdce616347d28e90c7ce47cbfcfcad3bc5',\n      keyType: 'Singleton',\n      valueContent: 'JSONURL',\n      valueType: 'bytes',\n    },\n    {\n      name: 'LSP1UniversalReceiverDelegate',\n      key: '0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47',\n      keyType: 'Singleton',\n      valueContent: 'Address',\n      valueType: 'address',\n    },\n  ];\n\n  const provider = new Web3.providers.HttpProvider(RPC_URL);\n  const config = {\n    ipfsGateway: 'https://ipfs.lukso.network/ipfs/',\n  };\n\n  const erc725 = new ERC725(schema, erc725ContractAddress, provider, config);\n\n  const data = await erc725.fetchData();\n\n  console.log(data);\n\n  return data;\n};\n","import {\n  DeploymentEvent,\n  DeploymentStatus,\n  DeploymentType,\n  LSPFactory,\n} from '@lukso/lsp-factory.js';\nimport Web3 from 'web3';\nimport { toast } from 'react-toastify';\n\nimport { CHAIN_ID, RPC_URL } from '../globals';\n\nexport const deployUp = async (web3: Web3, controllerAddress: string) => {\n  const deployKey = web3.eth.accounts.wallet[0].privateKey; // Private key of the account which will deploy UPs\n  const provider = RPC_URL; // RPC url used to connect to the network\n  const chainId = CHAIN_ID; // Chain Id of the network you want to connect to\n\n  const lspFactory = new LSPFactory(provider, {\n    deployKey,\n    chainId,\n  });\n\n  console.log('🚀 Deploying LSP3UniversalProfile contract...');\n  const deployedContracts = await lspFactory.LSP3UniversalProfile.deploy({\n    controllingAccounts: [controllerAddress], // our key will be controlling our UP in the beginning\n    lsp3Profile: {\n      name: 'My Universal Profile',\n      description: 'My Cool Universal Profile',\n      //   profileImage: [fileBlob], // got some Image uploaded?\n      backgroundImage: [],\n      tags: ['Public Profile'],\n      links: [\n        {\n          title: 'My Website',\n          url: 'http://my-website.com',\n        },\n      ],\n    },\n  });\n\n  console.log(`✅ Deployment and configuration successful`);\n  console.log('Contracts:', deployedContracts);\n\n  return deployedContracts.ERC725Account?.address;\n};\n\nexport const deployUpReactive = async (\n  web3: Web3,\n  controllerAddress: string,\n  callback: (erc725ContractAddress: string) => void,\n) => {\n  const deployKey = web3.eth.accounts.wallet[0].privateKey;\n  const provider = RPC_URL;\n  const chainId = CHAIN_ID;\n\n  const lspFactory = new LSPFactory(provider, {\n    deployKey,\n    chainId,\n  });\n\n  console.log('🚀 [reactive] Deploying LSP3UniversalProfile contract...');\n\n  let erc725ContractAddress: string;\n  lspFactory.LSP3UniversalProfile.deployReactive({\n    controllingAccounts: [controllerAddress],\n    lsp3Profile: {\n      name: 'My Universal Profile',\n      description: 'My Cool Universal Profile',\n      backgroundImage: [],\n      tags: ['Public Profile'],\n      links: [\n        {\n          title: 'My Website',\n          url: 'http://my-website.com',\n        },\n      ],\n    },\n  }).subscribe({\n    next: (deploymentEvent: DeploymentEvent) => {\n      console.log(deploymentEvent);\n\n      let toastMessage = '';\n\n      if (deploymentEvent.type === DeploymentType.TRANSACTION) {\n        toastMessage = `${deploymentEvent.contractName}: ${deploymentEvent.functionName} ${deploymentEvent.status}`;\n      } else {\n        toastMessage = `${deploymentEvent.contractName}: ${deploymentEvent.status}`;\n      }\n\n      switch (deploymentEvent.status) {\n        case DeploymentStatus.COMPLETE: {\n          toast.success(toastMessage);\n          break;\n        }\n        default: {\n          toast.info(toastMessage);\n          break;\n        }\n      }\n\n      if (\n        deploymentEvent.type === DeploymentType.PROXY &&\n        deploymentEvent.status === DeploymentStatus.PENDING &&\n        deploymentEvent.contractName === 'ERC725Account' &&\n        deploymentEvent.receipt\n      ) {\n        erc725ContractAddress = deploymentEvent.receipt.contractAddress;\n      }\n    },\n    complete: () => {\n      toast.success('Deployment successful');\n      callback(erc725ContractAddress);\n    },\n  });\n};\n","import Web3 from 'web3';\n\nimport UniversalProfile from '@lukso/universalprofile-smart-contracts/artifacts/UniversalProfile.json';\nimport KeyManager from '@lukso/universalprofile-smart-contracts/artifacts/LSP6KeyManager.json';\n\nexport const executeTransaction = async (web3: Web3, erc725Address: string) => {\n  const myUP = new web3.eth.Contract(\n    UniversalProfile.abi as any,\n    erc725Address,\n  );\n\n  const keyManagerAddress = await myUP.methods.owner().call();\n\n  console.log('UP owner address (KeyManager SC):', keyManagerAddress);\n\n  // call the execute function on your UP (operation, to, value, calldata)\n  const myKeyManager = new web3.eth.Contract(\n    KeyManager.abi as any,\n    keyManagerAddress,\n  );\n\n  const abi = myUP.methods\n    .setData(\n      ['0x5ef83ad9559033e6e941db7d7c495acdce616347d28e90c7ce47cbfcfcad3bc5'], // LSP3Profile\n      [\n        '0x6f357c6ad6c04598b25d41b96fb88a8c8ec4f4c3de2dc9bdaab7e71f40ed012b84d0c126697066733a2f2f516d6262447348577a4d4d724538594345766e3342633254706756793176535736414d3946376168595642573874',\n      ],\n    )\n    .encodeABI();\n\n  // send your tx to the blockchain, from the controlling key address, through the key manager\n  await myKeyManager.methods.execute(abi).send({\n    from: web3.eth.accounts.wallet[0].address,\n    gas: 200_000,\n    gasPrice: web3.utils.toWei('20', 'gwei'),\n  });\n};\n","/**\n * @author Hugo Masclet <git@hugom.xyz>\n */\nimport { useState, useEffect } from 'react';\nimport Web3 from 'web3';\n\nimport { RPC_URL } from '../globals';\n\nexport default function useWeb3() {\n  const [web3Info, setWeb3Info] = useState<Web3>();\n\n  useEffect(() => {\n    const getWeb3 = async () => {\n      const web3 = new Web3(RPC_URL);\n      return web3;\n    };\n\n    getWeb3().then((web3) => {\n      setWeb3Info(web3);\n      if (process.env.NODE_ENV === 'development') {\n        // @ts-ignore\n        window.web3 = web3;\n      }\n    });\n  }, []);\n\n  return web3Info;\n}\n","export const web3Constants = {\n  gasPrice: '10000000000',\n  chainId: 22,\n};\n","export const defaultFunctions: any = {\n  setData: {\n    inputs: [\n      {\n        internalType: 'bytes32[]',\n        name: '_keys',\n        type: 'bytes32[]',\n      },\n      {\n        internalType: 'bytes[]',\n        name: '_values',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'setData',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n};\n","import WalletConnectProvider from '@walletconnect/web3-provider';\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport Web3Modal from 'web3modal';\nimport { web3Constants } from '../../constants';\nimport { defaultFunctions } from '../../contracts/abi';\n\nconst Transaction: React.FC = () => {\n  const [web3, setWeb3] = useState<Web3>();\n  const [account, setAccount] = useState<string | undefined>();\n  const [payload, setPayload] = useState<string>();\n\n  const lyxAmount = '0.1';\n\n  const providerOptions = {\n    walletconnect: {\n      display: {\n        name: 'Mobile',\n      },\n      package: WalletConnectProvider,\n      options: {\n        rpc: {\n          56: 'https://bsc-dataseed.binance.org/',\n        },\n        network: 'binance',\n        chainId: 56,\n      },\n    },\n  };\n\n  const web3Modal = new Web3Modal({\n    network: 'mainnet',\n    cacheProvider: false, // optional\n    providerOptions, // required\n  });\n\n  const connectWallet = async () => {\n    const provider = await web3Modal.connect();\n\n    const web3 = new Web3(provider);\n    window.web3 = provider;\n\n    console.log('provider', provider);\n\n    setWeb3(web3);\n\n    try {\n      // This will only work for MetaMask atm\n      await window.ethereum.request({\n        method: 'wallet_addEthereumChain',\n        params: [\n          {\n            chainId: '0x16',\n            chainName: 'LUKSO L14',\n            nativeCurrency: {\n              name: 'LUKSO',\n              symbol: 'LYX',\n              decimals: 18,\n            },\n            rpcUrls: ['https://rpc.l14.lukso.network'],\n            blockExplorerUrls: ['https://blockscout.com/lukso/l14'],\n          },\n        ],\n      });\n    } catch (err) {\n      console.error('Could not set chain in the extension');\n    }\n\n    // ethereum.request({method: 'eth_accounts'}) -> good one\n    // ethereum.request({method: 'eth_requestAccounts'}) -> standard\n\n    const accounts = await web3.eth.getAccounts();\n    setAccount(accounts[0]);\n\n    provider.on('connect', (info: { chainId: number }) => {\n      console.log(info);\n    });\n\n    provider.on('accountsChanged', (accounts: string[]) => {\n      console.log(accounts);\n      setAccount(accounts[0]);\n    });\n\n    // Subscribe to chainId change\n    provider.on('chainChanged', (chainId: number) => {\n      console.log(chainId);\n    });\n  };\n\n  const disconnectWallet = () => {\n    setAccount(undefined);\n    setPayload('');\n    web3Modal.clearCachedProvider();\n  };\n\n  const sendLyx = async () => {\n    if (!web3) {\n      alert('not connected');\n      return;\n    }\n\n    const weiValue = web3.utils.toWei(lyxAmount, 'ether');\n    return await web3.eth\n      .sendTransaction({\n        from: account,\n        to: '0x23a86EF830708204646abFE631cA1a60d04c4FbE',\n        value: weiValue,\n        gasPrice: web3Constants.gasPrice,\n        // chainId: web3Constants.chainId,\n      })\n      .once('sending', (payload) => {\n        console.log(payload);\n        setPayload(JSON.stringify(payload, null, 2));\n      });\n  };\n\n  const setData = async () => {\n    if (!web3) {\n      alert('not connected');\n      return;\n    }\n\n    let erc725yContract = new web3.eth.Contract(\n      [defaultFunctions.setData],\n      '0x23a86EF830708204646abFE631cA1a60d04c4FbE',\n    );\n\n    return erc725yContract.methods\n      .setData(\n        ['0x5ef83ad9559033e6e941db7d7c495acdce616347d28e90c7ce47cbfcfcad3bc5'],\n        [\n          '0x6f357c6a70546a2accab18748420b63c63b5af4cf710848ae83afc0c51dd8ad17fb5e8b3697066733a2f2f516d65637247656a555156587057347a53393438704e76636e51724a314b69416f4d36626466725663575a736e35',\n        ],\n      )\n      .send({\n        from: account,\n      })\n      .once('sending', (payload) => {\n        console.log(JSON.stringify(payload, null, 2));\n        setPayload(JSON.stringify(payload, null, 2));\n      });\n  };\n\n  const setDataPermissions = async () => {\n    // TODO\n  };\n\n  return (\n    <div>\n      <h1>🆙 Sample React App - Transaction</h1>\n      <p>Lets send tx !</p>\n      <p>\n        <button onClick={account ? disconnectWallet : connectWallet}>\n          {account ? `Connected: ${account}` : 'Connect'}\n        </button>{' '}\n        - Note: the extension SHOULD inject the UP SC address - not an EOA\n        address.\n      </p>\n      <button onClick={sendLyx}>Send {lyxAmount} LYX</button>{' '}\n      <button onClick={setData}>Set data</button>{' '}\n      <button onClick={setDataPermissions}>Set data [permissions]</button>\n      <pre>{payload}</pre>\n    </div>\n  );\n};\n\nexport default Transaction;\n","import React from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\n\nimport Main from './pages/Main';\nimport Transaction from './pages/Main/Transactions';\n\n// import your favorite web3 convenience library here\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter basename=\"up-sample-react-app\">\n      <Routes>\n        <Route path=\"/tx\" element={<Transaction />} />\n        <Route\n          path=\"/\"\n          element={\n            <>\n              <Main />\n              <ToastContainer pauseOnFocusLoss newestOnTop autoClose={10000} />\n            </>\n          }\n        />\n      </Routes>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}